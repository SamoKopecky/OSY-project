#!/bin/sh
POSIXLY_CORRECT=yes
while getopts ":i:n" o; do
	case "$o" in
		i) FILE_ERE=$OPTARG;;
		n) N_ARG=1;;
		:) echo "-i requires an argument";;
		*) echo "USAGE : TODO";;
	esac
done
shift $((OPTIND -1))
if [ "$1" ]; then
	PROBING_DIR=$1
else
	PROBING_DIR=`pwd`
fi

if [ "$FILE_ERE" ]; then
	if [ "$FILE_ERE" = "-n" ]; then
		echo "-i requires an argument"
		N_ARG=1
	fi
	
	echo "$PROBING_DIR" | grep --quiet "$FILE_ERE"
	if [ $? = 0 ]; then
		echo "ignore file cant be contained in root directory" 
		exit 1
	fi
fi


echo "Root directory: $PROBING_DIR"
COLS=`tput cols`

find $PROBING_DIR -ls | awk -v cols=$COLS -v n_arg=$N_ARG -v file_ere=$FILE_ERE ' 
function create_string(num_of_files) {
	created_string = ""
	num_of_files = round_down(num_of_files)
	for(i = 0; i < int(num_of_files); ++i) {
		created_string = sprintf("%s#", created_string) 
	}
	return created_string
}
function reduce_size(max_files) {
	if (n_arg == 1) {
		cols = int(cols) - 12
		if (cols >= max_files) {
			return 1
		}
		return max_files / cols 
	}
	return 1 
} 
function round_down(number) {
	if (int(number) == number) {
		return int(number) 
	}
	return sprintf("%.0f", number - 0.50)
}
function find_max(array) {
	max = 0
	for(i in array) {
		if(array[i] > max) {
			max = array[i]
		}
	}
	return max
}
{
	if (file_ere == "" || $11 !~ file_ere) {
		if (substr($3, 0, 1) == "d") {
			dirs++
		}
		else {
			files++;
			if ($7 < 100) { 
				file_counts[0]++
			} else if ($7 < 1000) {
				file_counts[1]++
			} else if ($7 < 10000) {
				file_counts[2]++
			} else if ($7 < 100000) {
				file_counts[3]++
			} else if ($7 < 1000000) {
				file_counts[4]++
			} else if ($7 < 10000000) {
				file_counts[5]++
			} else if ($7 < 100000000) {
				file_counts[6]++
			} else if ($7 < 1000000000) {
				file_counts[7]++
			} else {
				file_counts[8]++
			}
		}
	}
}
END { 
 	multiplier = reduce_size(find_max(file_counts))
	printf("Directories: %d\n", dirs) 
	printf("All files: %d\n", files)
	printf("File size histogram:\n")
	printf("  <100 B  : %s\n", create_string(file_counts[0] / multiplier))
	printf("  <1 KiB  : %s\n", create_string(file_counts[1] / multiplier))
	printf("  <10 KiB : %s\n", create_string(file_counts[2] / multiplier))
	printf("  <100 KiB: %s\n", create_string(file_counts[3] / multiplier))
	printf("  <1 MiB  : %s\n", create_string(file_counts[4] / multiplier))
	printf("  <10 MiB : %s\n", create_string(file_counts[5] / multiplier))
	printf("  <100 MiB: %s\n", create_string(file_counts[6] / multiplier))
	printf("  <1 GiB  : %s\n", create_string(file_counts[7] / multiplier))
	printf("  >=1 GiB : %s\n", create_string(file_counts[8] / multiplier))
}
'
