#!/bin/bash
while getopts ":i:n" o; do
	case "$o" in
		i) echo "I_ARG = $OPTARG";;
		n) N_ARG=1;;
		:) echo "-i requires an argument";;
		*) echo "USAGE : TODO";;
	esac
done
shift $((OPTIND -1))
if [ $1 ]; then
	probing_dir=$1
else
	probing_dir=`pwd`
fi
echo "Root directory: $probing_dir"
COLS=`tput cols`

ls -RAl $probing_dir | awk -v cols=$COLS -v n_arg=$N_ARG ' 

function create_string(num_of_files) {
	created_string = ""
	num_of_files = round_down(num_of_files)
	for(i = 0; i < int(num_of_files); ++i) {
		created_string = sprintf("%s#", created_string) 
	}
	return created_string
}
function reduce_size(max_files) {
	if (n_arg == 1) {
		return max_files / (int(cols) - 12) 
	}
	return 1 
} 
function round_up(number) {
	return sprintf("%.0f", number + 0.49)
}
function round_down(number) {
	if (int(number) == number) {
		return int(number) 
	}
	return sprintf("%.0f", number - 0.50)
}
function find_max(array) {
	max = 0
	for(i in array) {
		if(array[i] > max) {
			max = array[i]
		}
	}
	return max
}
BEGIN {
}
{
	if (NF > 3) {
		if (substr($1, 0, 1) == "d") {
			dirs++
		}
		else {
			files++;
			if ($5 < 100) { 
				file_counts[0]++
			} else if ($5 < 1000) {
				file_counts[1]++
			} else if ($5 < 10000) {
				file_counts[2]++
			} else if ($5 < 100000) {
				file_counts[3]++
			} else if ($5 < 1000000) {
				file_counts[4]++
			} else if ($5 < 10000000) {
				file_counts[5]++
			} else if ($5 < 100000000) {
				file_counts[6]++
			} else if ($5 < 1000000000) {
				file_counts[7]++
			} else {
				file_counts[8]++
			}
			
		}
		
	}
}
END { 
	max_count = find_max(file_counts)
 	multiplier = reduce_size(max_count)
	dirs++;
	printf("Directories: %d\n", dirs); 
	printf("All files: %d\n", files);
	printf("File size histogram:\n")
	printf("  <100 B  : %s : %d\n", create_string(file_counts[0] / multiplier), file_counts[0])
	printf("  <1 KiB  : %s : %d\n", create_string(file_counts[1] / multiplier), file_counts[1])
	printf("  <10 KiB : %s : %d\n", create_string(file_counts[2] / multiplier), file_counts[2])
	printf("  <100 KiB: %s : %d\n", create_string(file_counts[3] / multiplier), file_counts[3])
	printf("  <1 MiB  : %s : %d\n", create_string(file_counts[4] / multiplier), file_counts[4])
	printf("  <10 MiB : %s : %d\n", create_string(file_counts[5] / multiplier), file_counts[5])
	printf("  <100 MiB: %s : %d\n", create_string(file_counts[6] / multiplier), file_counts[6])
	printf("  <1 GiB  : %s : %d\n", create_string(file_counts[7] / multiplier), file_counts[7])
	printf("  >=1 GiB : %s : %d\n", create_string(file_counts[8] / multiplier), file_counts[8])
}
'
